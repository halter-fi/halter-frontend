/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TradeRewardsVestingInterface extends ethers.utils.Interface {
  functions: {
    "COEFF()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "TREASURY_ROLE()": FunctionFragment;
    "UPDATER_ROLE()": FunctionFragment;
    "addEvent(uint256,uint256)": FunctionFragment;
    "addVesting(uint256,address,uint256,uint256)": FunctionFragment;
    "calculateAllClaims()": FunctionFragment;
    "calculateClaim(uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "emergencyClaim()": FunctionFragment;
    "events(uint256)": FunctionFragment;
    "getEmergencyClaimPoolReward(uint256)": FunctionFragment;
    "getEmergencyClaimRewards()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTotalPoolReward(uint256)": FunctionFragment;
    "getTotalRewards()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "reservoir()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "userClaimed(address,uint256)": FunctionFragment;
    "vestings(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "COEFF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addEvent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addVesting",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAllClaims",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyClaimPoolReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyClaimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPoolReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "reservoir", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vestings",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "COEFF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEvent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVesting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAllClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyClaimPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyClaimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reservoir", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vestings", data: BytesLike): Result;

  events: {
    "EventAdded(uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokensClaimed(address,uint256)": EventFragment;
    "TokensClaimedWithPenalty(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimedWithPenalty"): EventFragment;
}

export type EventAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { pid: BigNumber; startTime: BigNumber; endTime: BigNumber }
>;

export type EventAddedEventFilter = TypedEventFilter<EventAddedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TokensClaimedEvent = TypedEvent<
  [string, BigNumber],
  { paymentAddress: string; amountClaimed: BigNumber }
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export type TokensClaimedWithPenaltyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { paymentAddress: string; penaltyAmount: BigNumber; totalReward: BigNumber }
>;

export type TokensClaimedWithPenaltyEventFilter =
  TypedEventFilter<TokensClaimedWithPenaltyEvent>;

export interface TradeRewardsVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradeRewardsVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COEFF(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TREASURY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPDATER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addEvent(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVesting(
      _rewardRate: BigNumberish,
      _paymentAddress: string,
      _pid: BigNumberish,
      _totalAmountOfSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateAllClaims(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { finalAmount: BigNumber }>;

    calculateClaim(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { finalAmount: BigNumber }>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyClaim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; endTime: BigNumber }
    >;

    getEmergencyClaimPoolReward(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEmergencyClaimRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTotalPoolReward(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _rewardToken: string,
      _reservoir: string,
      _treasury: string,
      _updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reservoir(overrides?: CallOverrides): Promise<[string]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vestings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardRate: BigNumber;
        paymentAddress: string;
        lastPayment: BigNumber;
        totalAmountOfSeconds: BigNumber;
        penalty: BigNumber;
        pid: BigNumber;
      }
    >;
  };

  COEFF(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  TREASURY_ROLE(overrides?: CallOverrides): Promise<string>;

  UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

  addEvent(
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVesting(
    _rewardRate: BigNumberish,
    _paymentAddress: string,
    _pid: BigNumberish,
    _totalAmountOfSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateAllClaims(overrides?: CallOverrides): Promise<BigNumber>;

  calculateClaim(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyClaim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  events(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startTime: BigNumber; endTime: BigNumber }
  >;

  getEmergencyClaimPoolReward(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEmergencyClaimRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTotalPoolReward(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalRewards(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _rewardToken: string,
    _reservoir: string,
    _treasury: string,
    _updater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reservoir(overrides?: CallOverrides): Promise<string>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userClaimed(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vestings(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardRate: BigNumber;
      paymentAddress: string;
      lastPayment: BigNumber;
      totalAmountOfSeconds: BigNumber;
      penalty: BigNumber;
      pid: BigNumber;
    }
  >;

  callStatic: {
    COEFF(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    TREASURY_ROLE(overrides?: CallOverrides): Promise<string>;

    UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

    addEvent(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addVesting(
      _rewardRate: BigNumberish,
      _paymentAddress: string,
      _pid: BigNumberish,
      _totalAmountOfSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateAllClaims(overrides?: CallOverrides): Promise<BigNumber>;

    calculateClaim(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    emergencyClaim(overrides?: CallOverrides): Promise<void>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; endTime: BigNumber }
    >;

    getEmergencyClaimPoolReward(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmergencyClaimRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTotalPoolReward(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _rewardToken: string,
      _reservoir: string,
      _treasury: string,
      _updater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reservoir(overrides?: CallOverrides): Promise<string>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardRate: BigNumber;
        paymentAddress: string;
        lastPayment: BigNumber;
        totalAmountOfSeconds: BigNumber;
        penalty: BigNumber;
        pid: BigNumber;
      }
    >;
  };

  filters: {
    "EventAdded(uint256,uint256,uint256)"(
      pid?: null,
      startTime?: null,
      endTime?: null
    ): EventAddedEventFilter;
    EventAdded(
      pid?: null,
      startTime?: null,
      endTime?: null
    ): EventAddedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TokensClaimed(address,uint256)"(
      paymentAddress?: null,
      amountClaimed?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      paymentAddress?: null,
      amountClaimed?: null
    ): TokensClaimedEventFilter;

    "TokensClaimedWithPenalty(address,uint256,uint256)"(
      paymentAddress?: null,
      penaltyAmount?: null,
      totalReward?: null
    ): TokensClaimedWithPenaltyEventFilter;
    TokensClaimedWithPenalty(
      paymentAddress?: null,
      penaltyAmount?: null,
      totalReward?: null
    ): TokensClaimedWithPenaltyEventFilter;
  };

  estimateGas: {
    COEFF(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addEvent(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVesting(
      _rewardRate: BigNumberish,
      _paymentAddress: string,
      _pid: BigNumberish,
      _totalAmountOfSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateAllClaims(overrides?: CallOverrides): Promise<BigNumber>;

    calculateClaim(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyClaim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    events(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getEmergencyClaimPoolReward(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmergencyClaimRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPoolReward(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _rewardToken: string,
      _reservoir: string,
      _treasury: string,
      _updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reservoir(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COEFF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TREASURY_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPDATER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addEvent(
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVesting(
      _rewardRate: BigNumberish,
      _paymentAddress: string,
      _pid: BigNumberish,
      _totalAmountOfSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateAllClaims(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateClaim(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyClaim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmergencyClaimPoolReward(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmergencyClaimRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPoolReward(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _rewardToken: string,
      _reservoir: string,
      _treasury: string,
      _updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reservoir(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
